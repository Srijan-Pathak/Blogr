import { Hono } from 'hono'
import { PrismaClient } from '@prisma/client/edge'
import { withAccelerate } from '@prisma/extension-accelerate'
import { verify } from 'hono/jwt'
import { createBlogInput,updateBlogInput } from '@srijanpathak/blog-common'

//this is needed to remove the ts error in accessing env variables
export const blogRouter = new Hono<{
	Bindings: {
		DATABASE_URL: string
        JWT_SECRET : string
	},
    Variables: {
        userId: string
    }
}>();

interface AuthenticatedUser {
    id: string; // Ensure the user has an id of type string.
  }
//auth middlewere
blogRouter.use("/*", async (c, next) => {
    const authHeader = c.req.header("authorization") || "";
    // const token = header.split(" ")[1];  //for Barer token
    const user = await verify(authHeader, c.env.JWT_SECRET) as unknown as AuthenticatedUser
    if(user){
        c.set("userId",user.id);
        await next();
    }else{
      c.status(404);
      return c.json({error : "Not logged in"})
    }
  });

blogRouter.post('/', async (c) => {
    const prisma = new PrismaClient({
        datasourceUrl: c.env.DATABASE_URL,
    }).$extends(withAccelerate())
    const authorId = c.get("userId");
    const body = await c.req.json();
    const {success} = createBlogInput.safeParse(body);//zod validation
    if (!success){
      c.status(411);
      return c.json({
          message:"Inputs are not correct"
      })
    }
    const blog = await prisma.post.create({
        data:{
            title: body.title,
            content : body.content,
            authorId: parseInt(authorId)
        }
    })
    return c.json({id: blog.id})
});
  
blogRouter.put('/', async (c) => {
    const prisma = new PrismaClient({
        datasourceUrl: c.env.DATABASE_URL,
    }).$extends(withAccelerate())
    const body = await c.req.json();
    const {success} = updateBlogInput.safeParse(body);//zod validation
    if (!success){
      c.status(411);
      return c.json({
          message:"Inputs are not correct"
      })
    }
    const blog = await prisma.post.update({
        where:{
            id: body.id
        },
        data:{
            title: body.title,
            content: body.content
        }
    })
    return c.json({id: blog.id});
});


//implement pagination here
blogRouter.get('/bulk', async (c) => {
    const prisma = new PrismaClient({
        datasourceUrl: c.env.DATABASE_URL,
    }).$extends(withAccelerate())

    const blogs = await prisma.post.findMany({
        select:{
            content:true,
            title:true,
            id: true,
            author: {
                select:{
                    name:true
                }
            }
        }
    });

    return c.json({blogs});
});
  
blogRouter.get('/:id', async (c) => {
    const prisma = new PrismaClient({
        datasourceUrl: c.env.DATABASE_URL,
    }).$extends(withAccelerate())
    const id = c.req.param("id");
    try{
        const blog = await prisma.post.findFirst({
            where: {
                id: id
            },
            select:{
                id:true,
                title:true,
                content: true,
                author:{
                    select:{
                    name:true
                    }
                }
            }
        })
        return c.json({blog});
    }
    catch(e){
        c.status(404);
      return c.json({error : "Not Found"})
    }
});

//blogpost
import { useParams } from "react-router-dom";
import { useBlog } from "../hooks"
import { BlogPost } from "../components/BlogPost";
import { BlogPostSkeleton } from "../components/BlogPostSkeleton";

export const Blog =()=>{
    const{id}= useParams();
    const {loading , blog}= useBlog({
        id: id || ""
    }   );
    if(loading){
        <div>
            <BlogPostSkeleton/>
        </div>
    }
    if (!blog) {
        return <div><BlogPostSkeleton/></div>;
    }
    return <div>
        <BlogPost blog={blog}/>
    </div>
}
//bulk
blogRouter.get('/bulk', async (c) => {
    const prisma = new PrismaClient({
        datasourceUrl: c.env.DATABASE_URL,
    }).$extends(withAccelerate())

    const blogs = await prisma.post.findMany({
        select:{
            content:true,
            title:true,
            id: true,
            author: {
                select:{
                    name:true
                }
            }
        }
    });

    return c.json({blogs});
});
//publich 
import React, { useState } from 'react';
import axios from "axios";
import { BACKEND_URL } from "../config";
import { useNavigate } from 'react-router-dom';
import { Appbar } from '../components/Appbar';

export const Publish = () => {
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const navigate = useNavigate();

  const handlePublish = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const response = await axios.post(`${BACKEND_URL}/api/v1/blog`, 
        { title, content },
        {
          headers: {
            Authorization: localStorage.getItem('token')
          }
        }
      );
      console.log('Blog published successfully:', response.data);
      navigate(`/blog/${response.data.id}`)
      // You can add a success message or redirect here
    } catch (error) {
      console.error('Error publishing blog:', error);
      // You can add error handling here (e.g., showing an error message to the user)
    }
  };

  return (
    <div><Appbar/>
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-50">
      <div className="max-w-3xl w-full px-4 py-12 space-y-6 text-center">
        <h1 className="text-4xl font-bold tracking-tight sm:text-5xl">Publish Your Blog Post</h1>
        <p className="text-gray-600">
          Share your thoughts and ideas with the world. Our simple publishing tool makes it easy to get your content
          online.
        </p>
        <form className="flex flex-col gap-4 w-full" onSubmit={handlePublish}>
          <div>
            <label htmlFor="title" className="block text-left text-sm font-medium text-gray-700">Title</label>
            <input
              id="title"
              type="text"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder="Enter your blog post title"
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              required
            />
          </div>
          <div>
            <label htmlFor="content" className="block text-left text-sm font-medium text-gray-700">Content</label>
            <textarea
              id="content"
              value={content}
              onChange={(e) => setContent(e.target.value)}
              placeholder="Write your blog post content"
              rows={8}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              required
            />
          </div>
          <div className="flex justify-between items-center mt-2">
            <button
              type="submit"
              className="px-4 py-2 bg-indigo-600 text-white text-sm font-medium rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
            >
              Publish
            </button>
            <button
              type="button"
              className="px-4 py-2 border border-gray-300 text-gray-700 text-sm font-medium rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
            >
              Preview
            </button>
          </div>
        </form>
      </div>
    </div>
    </div>
  );
}